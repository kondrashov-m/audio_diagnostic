import os
import numpy as np
import librosa
import sounddevice as sd
import wave
import threading
from tensorflow import keras
from pynput import keyboard
import time
import sys
import shutil

# =====================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =====================
DATASET_PATH = "–î–∞—Ç–∞—Å–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
EXHAUST_PATH = os.path.join(DATASET_PATH, "–≤—ã—Ö–ª–æ–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
OTHER_PATH = os.path.join(DATASET_PATH, "–¥—Ä—É–≥–∏–µ_–∑–≤—É–∫–∏")
MODEL_PATH = "exhaust_model.h5"
TEMP_AUDIO = "temp_recording.wav"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–∏—Å–∏
SAMPLE_RATE = 22050
DURATION = 3  # —Å–µ–∫—É–Ω–¥—ã
CHANNELS = 1

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(EXHAUST_PATH, exist_ok=True)
os.makedirs(OTHER_PATH, exist_ok=True)

# =====================
# 1. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =====================

def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
    try:
        if os.path.exists(MODEL_PATH):
            model = keras.models.load_model(MODEL_PATH)
            print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return model
        else:
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –û–±—É—á–µ–Ω–∏–µ_–ú–æ–¥–µ–ª–∏.py")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

def record_audio(filename, duration, samplerate):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
    print(f"üé§ –ó–∞–ø–∏—Å—ã–≤–∞—é {duration} —Å–µ–∫—É–Ω–¥...")
    audio_data = sd.rec(int(duration * samplerate),
                       samplerate=samplerate,
                       channels=CHANNELS,
                       dtype='float32')
    sd.wait()  # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with wave.open(filename, 'wb') as wf:
        wf.setnchannels(CHANNELS)
        wf.setsampwidth(2)
        wf.setframerate(samplerate)
        wf.writeframes((audio_data * 32767).astype(np.int16).tobytes())
    
    print("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    return filename

def audio_to_spectrogram(audio_path, target_shape=(128, 128)):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—É–¥–∏–æ –≤ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É"""
    y, sr = librosa.load(audio_path, sr=SAMPLE_RATE, duration=2)
    
    spectrogram = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=target_shape[0])
    spectrogram_db = librosa.power_to_db(spectrogram, ref=np.max)
    spectrogram_db = (spectrogram_db - spectrogram_db.min()) / (spectrogram_db.max() - spectrogram_db.min())
    
    if spectrogram_db.shape[1] < target_shape[1]:
        pad_width = target_shape[1] - spectrogram_db.shape[1]
        spectrogram_db = np.pad(spectrogram_db, ((0, 0), (0, pad_width)), mode='constant')
    else:
        spectrogram_db = spectrogram_db[:, :target_shape[1]]
    
    return spectrogram_db.reshape(1, target_shape[0], target_shape[1], 1)

def predict_audio(audio_path, model):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–≤—É–∫–∞"""
    spectrogram = audio_to_spectrogram(audio_path)
    prediction = model.predict(spectrogram, verbose=0)[0][0]
    
    if prediction > 0.5:
        return f"üîä –≠–¢–û –ó–í–£–ö –í–´–•–õ–û–ü–ê! (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction:.2%})", prediction, 1
    else:
        return f"üö´ –≠—Ç–æ –Ω–µ –∑–≤—É–∫ –≤—ã—Ö–ª–æ–ø–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {1-prediction:.2%})", prediction, 0

def save_audio_with_feedback(audio_path, user_feedback, model_prediction):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—É–¥–∏–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ feedback"""
    timestamp = int(time.time())
    new_filename = f"audio_{timestamp}.wav"
    
    if user_feedback == 1:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω —Å –º–æ–¥–µ–ª—å—é
        if model_prediction == 1:
            save_path = os.path.join(EXHAUST_PATH, new_filename)
        else:
            save_path = os.path.join(OTHER_PATH, new_filename)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –º–æ–¥–µ–ª—å—é
        if model_prediction == 1:
            save_path = os.path.join(OTHER_PATH, new_filename)  # –ú–æ–¥–µ–ª—å —Å–∫–∞–∑–∞–ª–∞ "–≤—ã—Ö–ª–æ–ø", –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª "–Ω–µ—Ç"
        else:
            save_path = os.path.join(EXHAUST_PATH, new_filename)  # –ú–æ–¥–µ–ª—å —Å–∫–∞–∑–∞–ª–∞ "–Ω–µ –≤—ã—Ö–ª–æ–ø", –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª "–¥–∞"
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
    shutil.copy(audio_path, save_path)
    print(f"üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {save_path}")
    
    return save_path

def retrain_model():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    print("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    print("‚è≥ –î–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
    time.sleep(3)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    if os.path.exists("–û–±—É—á–µ–Ω–∏–µ_–ú–æ–¥–µ–ª–∏.py"):
        os.system("python –û–±—É—á–µ–Ω–∏–µ_–ú–æ–¥–µ–ª–∏.py")
    else:
        print("‚ùå –§–∞–π–ª '–û–±—É—á–µ–Ω–∏–µ_–ú–æ–¥–µ–ª–∏.py' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    sys.exit()

# =====================
# 2. –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ü–†–û–ì–†–ê–ú–ú–´
# =====================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –°–ò–°–¢–ï–ú–ê –ü–†–û–í–ï–†–ö–ò –ó–í–£–ö–û–í –í–´–•–õ–û–ü–ê")
    print("=" * 40)
    print("–ù–∞–∂–º–∏—Ç–µ R - –∑–∞–ø–∏—Å–∞—Ç—å –∑–≤—É–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
    print("–ù–∞–∂–º–∏—Ç–µ L - –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
    print("–ù–∞–∂–º–∏—Ç–µ ESC - –≤—ã—Ö–æ–¥")
    print("=" * 40)
    
    model = load_model()
    if not model:
        return

    # –§–ª–∞–≥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    is_processing = False

    def on_press(key):
        nonlocal is_processing
        try:
            if key == keyboard.Key.esc:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                return False
            
            elif hasattr(key, 'char') and key.char == 'r' and not is_processing:
                is_processing = True
                print("\n" + "=" * 40)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ
                record_audio(TEMP_AUDIO, DURATION, SAMPLE_RATE)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                result, confidence, prediction = predict_audio(TEMP_AUDIO, model)
                print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                print("\n‚ùì –í–µ—Ä–Ω–æ –ª–∏ —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª?")
                if prediction == 1:
                    user_input = input("1 - –î–ê, —ç—Ç–æ –∑–≤—É–∫ –≤—ã—Ö–ª–æ–ø–∞\n0 - –ù–ï–¢, —ç—Ç–æ –¥—Ä—É–≥–æ–π –∑–≤—É–∫\n–í–∞—à –≤—ã–±–æ—Ä: ")
                else:
                    user_input = input("1 - –î–ê, —ç—Ç–æ –¥—Ä—É–≥–æ–π –∑–≤—É–∫\n0 - –ù–ï–¢, —ç—Ç–æ –∑–≤—É–∫ –≤—ã—Ö–ª–æ–ø–∞\n–í–∞—à –≤—ã–±–æ—Ä: ")
                
                try:
                    feedback = int(user_input)
                    if feedback in [0, 1]:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ —Å —É—á–µ—Ç–æ–º feedback
                        save_audio_with_feedback(TEMP_AUDIO, feedback, prediction)
                        print("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
                    else:
                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ 1")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 0 –∏–ª–∏ 1")
                
                print("\n–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ...")
                is_processing = False
                
            elif hasattr(key, 'char') and key.char == 'l':
                print("\nüîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è...")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                threading.Thread(target=retrain_model, daemon=True).start()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            is_processing = False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∫–ª–∞–≤–∏—à —Å suppress=True
    print("\n–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à...")
    with keyboard.Listener(on_press=on_press, suppress=True) as listener:
        listener.join()

if __name__ == "__main__":
    main()