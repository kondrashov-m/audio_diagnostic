import os
import numpy as np
import librosa
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')

# =====================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =====================
DATASET_PATH = "–î–∞—Ç–∞—Å–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
EXHAUST_PATH = os.path.join(DATASET_PATH, "–≤—ã—Ö–ª–æ–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
OTHER_PATH = os.path.join(DATASET_PATH, "–¥—Ä—É–≥–∏–µ_–∑–≤—É–∫–∏")
MODEL_PATH = "exhaust_model.h5"
TARGET_SHAPE = (128, 128)
BATCH_SIZE = 8
EPOCHS = 20

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(EXHAUST_PATH, exist_ok=True)
os.makedirs(OTHER_PATH, exist_ok=True)

# =====================
# 1. –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ó–í–£–ö–ê
# =====================

def audio_to_spectrogram(audio_path, target_shape=TARGET_SHAPE):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—É–¥–∏–æ –≤ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É"""
    try:
        y, sr = librosa.load(audio_path, sr=22050, duration=2)
        
        spectrogram = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=target_shape[0])
        spectrogram_db = librosa.power_to_db(spectrogram, ref=np.max)
        spectrogram_db = (spectrogram_db - spectrogram_db.min()) / (spectrogram_db.max() - spectrogram_db.min())
        
        if spectrogram_db.shape[1] < target_shape[1]:
            pad_width = target_shape[1] - spectrogram_db.shape[1]
            spectrogram_db = np.pad(spectrogram_db, ((0, 0), (0, pad_width)), mode='constant')
        else:
            spectrogram_db = spectrogram_db[:, :target_shape[1]]
        
        return spectrogram_db
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {audio_path}: {e}")
        return None

def load_all_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–ø–æ–∫"""
    print("üìÅ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
    
    X = []
    y = []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫–∏ –≤—ã—Ö–ª–æ–ø–∞
    if os.path.exists(EXHAUST_PATH):
        exhaust_files = [f for f in os.listdir(EXHAUST_PATH) if f.endswith(('.wav', '.mp3', '.flac'))]
        for file in exhaust_files:
            audio_path = os.path.join(EXHAUST_PATH, file)
            spectrogram = audio_to_spectrogram(audio_path)
            if spectrogram is not None:
                X.append(spectrogram)
                y.append(1)  # 1 = –∑–≤—É–∫ –≤—ã—Ö–ª–æ–ø–∞
        print(f"üéµ –ó–≤—É–∫–æ–≤ –≤—ã—Ö–ª–æ–ø–∞: {len(exhaust_files)}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–≥–∏–µ –∑–≤—É–∫–∏
    if os.path.exists(OTHER_PATH):
        other_files = [f for f in os.listdir(OTHER_PATH) if f.endswith(('.wav', '.mp3', '.flac'))]
        for file in other_files:
            audio_path = os.path.join(OTHER_PATH, file)
            spectrogram = audio_to_spectrogram(audio_path)
            if spectrogram is not None:
                X.append(spectrogram)
                y.append(0)  # 0 = –¥—Ä—É–≥–∏–µ –∑–≤—É–∫–∏
        print(f"üéµ –î—Ä—É–≥–∏—Ö –∑–≤—É–∫–æ–≤: {len(other_files)}")
    
    if len(X) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è! –î–æ–±–∞–≤—å—Ç–µ –∑–≤—É–∫–∏ –≤ –ø–∞–ø–∫–∏.")
        return None, None
    
    X = np.array(X)
    y = np.array(y)
    X = X.reshape(X.shape + (1,))
    
    print(f"üìä –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(X)}")
    return X, y

def create_model(input_shape):
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    model = keras.Sequential([
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
        layers.MaxPooling2D((2, 2)),
        
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        
        layers.Flatten(),
        layers.Dense(64, activation='relu'),
        layers.Dropout(0.3),
        layers.Dense(1, activation='sigmoid')
    ])
    
    model.compile(
        optimizer='adam',
        loss='binary_crossentropy',
        metrics=['accuracy']
    )
    
    return model

# =====================
# 2. –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò
# =====================

def train_model():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è"""
    X, y = load_all_data()
    
    if X is None:
        return None
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    model = create_model((TARGET_SHAPE[0], TARGET_SHAPE[1], 1))
    
    print("ü§ñ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:")
    model.summary()
    
    print("üéØ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ...")
    history = model.fit(
        X_train, y_train,
        batch_size=BATCH_SIZE,
        epochs=EPOCHS,
        validation_data=(X_test, y_test),
        verbose=1,
        callbacks=[
            keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True),
            keras.callbacks.ReduceLROnPlateau(patience=5, factor=0.5, verbose=1)
        ]
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    model.save(MODEL_PATH)
    print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ '{MODEL_PATH}'")
    
    # –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
    test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=0)
    print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {test_accuracy:.2%}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
    plt.figure(figsize=(12, 4))
    plt.subplot(1, 2, 1)
    plt.plot(history.history['accuracy'], label='Training Accuracy')
    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
    plt.title('Accuracy')
    plt.legend()
    
    plt.subplot(1, 2, 2)
    plt.plot(history.history['loss'], label='Training Loss')
    plt.plot(history.history['val_loss'], label='Validation Loss')
    plt.title('Loss')
    plt.legend()
    
    plt.tight_layout()
    plt.savefig('training_history.png')
    print("üìä –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'training_history.png'")
    
    return model

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø –ú–û–î–ï–õ–ò")
    print("=" * 50)
    model = train_model()
    if model:
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
    
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")